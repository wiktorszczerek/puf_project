// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Duplicate (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst1_data_stream_V_din,
        dst1_data_stream_V_full_n,
        dst1_data_stream_V_write,
        dst2_data_stream_V_din,
        dst2_data_stream_V_full_n,
        dst2_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_state2 = 4'b10;
parameter    ap_ST_fsm_pp0_stage0 = 4'b100;
parameter    ap_ST_fsm_state5 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv10_2D0 = 10'b1011010000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv11_500 = 11'b10100000000;
parameter    ap_const_lv11_1 = 11'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst1_data_stream_V_din;
input   dst1_data_stream_V_full_n;
output   dst1_data_stream_V_write;
output  [7:0] dst2_data_stream_V_din;
input   dst2_data_stream_V_full_n;
output   dst2_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg src_data_stream_V_read;
reg dst1_data_stream_V_write;
reg dst2_data_stream_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    src_data_stream_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_reg_139;
reg    dst1_data_stream_V_blk_n;
reg    dst2_data_stream_V_blk_n;
reg   [10:0] p_6_reg_95;
wire   [0:0] exitcond1_fu_106_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [9:0] i_V_fu_112_p2;
reg   [9:0] i_V_reg_134;
wire   [0:0] exitcond_fu_118_p2;
reg    ap_condition_98;
wire   [10:0] j_V_fu_124_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [9:0] p_s_reg_84;
wire   [0:0] ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'b1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_106_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)) & ~(1'b0 == exitcond_fu_118_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_106_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)) & (1'b0 == exitcond_fu_118_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_106_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)) & ~(1'b0 == exitcond_fu_118_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if (~(1'b0 == start_full_n)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if (((1'b1 == start_control_reg) & (1'b1 == start_full_n))) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_fu_118_p2))) begin
        p_6_reg_95 <= j_V_fu_124_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_106_p2))) begin
        p_6_reg_95 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_s_reg_84 <= i_V_reg_134;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((real_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        p_s_reg_84 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)))) begin
        exitcond_reg_139 <= exitcond_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_134 <= i_V_fu_112_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_106_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_139 == 1'b0))) begin
        dst1_data_stream_V_blk_n = dst1_data_stream_V_full_n;
    end else begin
        dst1_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_139 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)))) begin
        dst1_data_stream_V_write = 1'b1;
    end else begin
        dst1_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_139 == 1'b0))) begin
        dst2_data_stream_V_blk_n = dst2_data_stream_V_full_n;
    end else begin
        dst2_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_139 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)))) begin
        dst2_data_stream_V_write = 1'b1;
    end else begin
        dst2_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_106_p2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_139 == 1'b0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_139 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond1_fu_106_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_118_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_98 == 1'b1)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_118_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_3];

always @ (*) begin
    ap_condition_98 = (((exitcond_reg_139 == 1'b0) & (src_data_stream_V_empty_n == 1'b0)) | ((exitcond_reg_139 == 1'b0) & (dst1_data_stream_V_full_n == 1'b0)) | ((exitcond_reg_139 == 1'b0) & (dst2_data_stream_V_full_n == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign dst1_data_stream_V_din = src_data_stream_V_dout;

assign dst2_data_stream_V_din = src_data_stream_V_dout;

assign exitcond1_fu_106_p2 = ((p_s_reg_84 == ap_const_lv10_2D0) ? 1'b1 : 1'b0);

assign exitcond_fu_118_p2 = ((p_6_reg_95 == ap_const_lv11_500) ? 1'b1 : 1'b0);

assign i_V_fu_112_p2 = (p_s_reg_84 + ap_const_lv10_1);

assign j_V_fu_124_p2 = (p_6_reg_95 + ap_const_lv11_1);

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

endmodule //Duplicate
