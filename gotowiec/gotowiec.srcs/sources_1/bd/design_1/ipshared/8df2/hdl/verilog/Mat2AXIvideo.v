// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read,
        img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read,
        img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_state2 = 4'b10;
parameter    ap_ST_fsm_pp0_stage0 = 4'b100;
parameter    ap_ST_fsm_state6 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv10_2D0 = 10'b1011010000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv11_500 = 11'b10100000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv11_4FF = 11'b10011111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_data_stream_0_V_dout;
input   img_data_stream_0_V_empty_n;
output   img_data_stream_0_V_read;
input  [7:0] img_data_stream_1_V_dout;
input   img_data_stream_1_V_empty_n;
output   img_data_stream_1_V_read;
input  [7:0] img_data_stream_2_V_dout;
input   img_data_stream_2_V_empty_n;
output   img_data_stream_2_V_read;
output  [23:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [2:0] OUTPUT_STREAM_TKEEP;
output  [2:0] OUTPUT_STREAM_TSTRB;
output  [0:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [0:0] OUTPUT_STREAM_TID;
output  [0:0] OUTPUT_STREAM_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_0_V_read;
reg img_data_stream_1_V_read;
reg img_data_stream_2_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [23:0] AXI_video_strm_V_data_V_1_data_out;
reg    AXI_video_strm_V_data_V_1_vld_in;
wire    AXI_video_strm_V_data_V_1_vld_out;
wire    AXI_video_strm_V_data_V_1_ack_in;
wire    AXI_video_strm_V_data_V_1_ack_out;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_A;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_B;
reg    AXI_video_strm_V_data_V_1_sel_rd;
reg    AXI_video_strm_V_data_V_1_sel_wr;
wire    AXI_video_strm_V_data_V_1_sel;
wire    AXI_video_strm_V_data_V_1_load_A;
wire    AXI_video_strm_V_data_V_1_load_B;
reg   [1:0] AXI_video_strm_V_data_V_1_state;
wire    AXI_video_strm_V_data_V_1_state_cmp_full;
wire   [2:0] AXI_video_strm_V_keep_V_1_data_out;
reg    AXI_video_strm_V_keep_V_1_vld_in;
wire    AXI_video_strm_V_keep_V_1_vld_out;
wire    AXI_video_strm_V_keep_V_1_ack_in;
wire    AXI_video_strm_V_keep_V_1_ack_out;
reg    AXI_video_strm_V_keep_V_1_sel_rd;
wire    AXI_video_strm_V_keep_V_1_sel;
reg   [1:0] AXI_video_strm_V_keep_V_1_state;
wire   [2:0] AXI_video_strm_V_strb_V_1_data_out;
reg    AXI_video_strm_V_strb_V_1_vld_in;
wire    AXI_video_strm_V_strb_V_1_vld_out;
wire    AXI_video_strm_V_strb_V_1_ack_in;
wire    AXI_video_strm_V_strb_V_1_ack_out;
reg    AXI_video_strm_V_strb_V_1_sel_rd;
wire    AXI_video_strm_V_strb_V_1_sel;
reg   [1:0] AXI_video_strm_V_strb_V_1_state;
reg   [0:0] AXI_video_strm_V_user_V_1_data_out;
reg    AXI_video_strm_V_user_V_1_vld_in;
wire    AXI_video_strm_V_user_V_1_vld_out;
wire    AXI_video_strm_V_user_V_1_ack_in;
wire    AXI_video_strm_V_user_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_B;
reg    AXI_video_strm_V_user_V_1_sel_rd;
reg    AXI_video_strm_V_user_V_1_sel_wr;
wire    AXI_video_strm_V_user_V_1_sel;
wire    AXI_video_strm_V_user_V_1_load_A;
wire    AXI_video_strm_V_user_V_1_load_B;
reg   [1:0] AXI_video_strm_V_user_V_1_state;
wire    AXI_video_strm_V_user_V_1_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_1_data_out;
reg    AXI_video_strm_V_last_V_1_vld_in;
wire    AXI_video_strm_V_last_V_1_vld_out;
wire    AXI_video_strm_V_last_V_1_ack_in;
wire    AXI_video_strm_V_last_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_B;
reg    AXI_video_strm_V_last_V_1_sel_rd;
reg    AXI_video_strm_V_last_V_1_sel_wr;
wire    AXI_video_strm_V_last_V_1_sel;
wire    AXI_video_strm_V_last_V_1_load_A;
wire    AXI_video_strm_V_last_V_1_load_B;
reg   [1:0] AXI_video_strm_V_last_V_1_state;
wire    AXI_video_strm_V_last_V_1_state_cmp_full;
wire   [0:0] AXI_video_strm_V_id_V_1_data_out;
reg    AXI_video_strm_V_id_V_1_vld_in;
wire    AXI_video_strm_V_id_V_1_vld_out;
wire    AXI_video_strm_V_id_V_1_ack_in;
wire    AXI_video_strm_V_id_V_1_ack_out;
reg    AXI_video_strm_V_id_V_1_sel_rd;
wire    AXI_video_strm_V_id_V_1_sel;
reg   [1:0] AXI_video_strm_V_id_V_1_state;
wire   [0:0] AXI_video_strm_V_dest_V_1_data_out;
reg    AXI_video_strm_V_dest_V_1_vld_in;
wire    AXI_video_strm_V_dest_V_1_vld_out;
wire    AXI_video_strm_V_dest_V_1_ack_in;
wire    AXI_video_strm_V_dest_V_1_ack_out;
reg    AXI_video_strm_V_dest_V_1_sel_rd;
wire    AXI_video_strm_V_dest_V_1_sel;
reg   [1:0] AXI_video_strm_V_dest_V_1_state;
reg    img_data_stream_0_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_reg_236;
reg    img_data_stream_1_V_blk_n;
reg    img_data_stream_2_V_blk_n;
reg    OUTPUT_STREAM_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_reg_236;
reg   [10:0] p_4_reg_154;
wire   [0:0] exitcond9_fu_170_p2;
wire   [0:0] ap_CS_fsm_state2;
reg    ap_condition_490;
wire   [9:0] i_V_fu_176_p2;
reg   [9:0] i_V_reg_231;
wire   [0:0] exitcond_fu_182_p2;
reg    ap_condition_508;
wire   [10:0] j_V_fu_188_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_194_p2;
reg   [0:0] axi_last_V_reg_245;
wire   [23:0] tmp_data_V_fu_204_p4;
reg   [9:0] p_s_reg_143;
wire   [0:0] ap_CS_fsm_state6;
reg   [0:0] tmp_user_V_fu_92;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'b1;
#0 AXI_video_strm_V_data_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_1_state = 2'b00;
#0 AXI_video_strm_V_keep_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_keep_V_1_state = 2'b00;
#0 AXI_video_strm_V_strb_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_strb_V_1_state = 2'b00;
#0 AXI_video_strm_V_user_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_1_state = 2'b00;
#0 AXI_video_strm_V_last_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_1_state = 2'b00;
#0 AXI_video_strm_V_id_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_id_V_1_state = 2'b00;
#0 AXI_video_strm_V_dest_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_dest_V_1_state = 2'b00;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_out))) begin
            AXI_video_strm_V_data_V_1_sel_rd <= ~AXI_video_strm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_in))) begin
            AXI_video_strm_V_data_V_1_sel_wr <= ~AXI_video_strm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_2)))) begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_1)))) begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_2)) | ((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_1)) | ((AXI_video_strm_V_data_V_1_state == ap_const_lv2_3) & ~((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out))))) begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_out))) begin
            AXI_video_strm_V_dest_V_1_sel_rd <= ~AXI_video_strm_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_dest_V_1_state)) | ((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_dest_V_1_state)))) begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_dest_V_1_state)) | ((1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_dest_V_1_state)))) begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_dest_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_dest_V_1_state)) | ((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_dest_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_dest_V_1_state) & ~((1'b1 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out))))) begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_out))) begin
            AXI_video_strm_V_id_V_1_sel_rd <= ~AXI_video_strm_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_id_V_1_state)) | ((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_id_V_1_state)))) begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_id_V_1_vld_in) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_id_V_1_state)) | ((1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_id_V_1_state)))) begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_id_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_id_V_1_state)) | ((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_id_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_id_V_1_state) & ~((1'b1 == AXI_video_strm_V_id_V_1_vld_in) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out))))) begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_out))) begin
            AXI_video_strm_V_keep_V_1_sel_rd <= ~AXI_video_strm_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_keep_V_1_state)) | ((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_keep_V_1_state)))) begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_keep_V_1_state)) | ((1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_keep_V_1_state)))) begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_keep_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_keep_V_1_state)) | ((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_keep_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_keep_V_1_state) & ~((1'b1 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out))))) begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_out))) begin
            AXI_video_strm_V_last_V_1_sel_rd <= ~AXI_video_strm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_in))) begin
            AXI_video_strm_V_last_V_1_sel_wr <= ~AXI_video_strm_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_last_V_1_state)) | ((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_last_V_1_state)))) begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_last_V_1_state)) | ((1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_last_V_1_state)))) begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_last_V_1_state)) | ((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_last_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_last_V_1_state) & ~((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out))))) begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_out))) begin
            AXI_video_strm_V_strb_V_1_sel_rd <= ~AXI_video_strm_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_strb_V_1_state)) | ((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_strb_V_1_state)))) begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_strb_V_1_state)) | ((1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_strb_V_1_state)))) begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_strb_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_strb_V_1_state)) | ((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_strb_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_strb_V_1_state) & ~((1'b1 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out))))) begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_out))) begin
            AXI_video_strm_V_user_V_1_sel_rd <= ~AXI_video_strm_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_in))) begin
            AXI_video_strm_V_user_V_1_sel_wr <= ~AXI_video_strm_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_user_V_1_state)) | ((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_user_V_1_state)))) begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_user_V_1_state)) | ((1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_user_V_1_state)))) begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_user_V_1_state)) | ((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_user_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_user_V_1_state) & ~((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out))))) begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_fu_182_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b0 == exitcond_fu_182_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_fu_182_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_fu_182_p2))) begin
        p_4_reg_154 <= j_V_fu_188_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1))) begin
        p_4_reg_154 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_s_reg_143 <= i_V_reg_231;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        p_s_reg_143 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        tmp_user_V_fu_92 <= 1'b0;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        tmp_user_V_fu_92 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_A)) begin
        AXI_video_strm_V_data_V_1_payload_A <= tmp_data_V_fu_204_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_B)) begin
        AXI_video_strm_V_data_V_1_payload_B <= tmp_data_V_fu_204_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_A)) begin
        AXI_video_strm_V_last_V_1_payload_A <= axi_last_V_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_B)) begin
        AXI_video_strm_V_last_V_1_payload_B <= axi_last_V_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_A)) begin
        AXI_video_strm_V_user_V_1_payload_A <= tmp_user_V_fu_92;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_B)) begin
        AXI_video_strm_V_user_V_1_payload_B <= tmp_user_V_fu_92;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        ap_pipeline_reg_pp0_iter1_exitcond_reg_236 <= exitcond_reg_236;
        exitcond_reg_236 <= exitcond_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b0 == exitcond_fu_182_p2))) begin
        axi_last_V_reg_245 <= axi_last_V_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(ap_condition_490 == 1'b1))) begin
        i_V_reg_231 <= i_V_fu_176_p2;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_sel)) begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_B;
    end else begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_sel)) begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_B;
    end else begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_sel)) begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_B;
    end else begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236)))) begin
        OUTPUT_STREAM_TDATA_blk_n = AXI_video_strm_V_data_V_1_state[1'b1];
    end else begin
        OUTPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236))) begin
        img_data_stream_0_V_blk_n = img_data_stream_0_V_empty_n;
    end else begin
        img_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        img_data_stream_0_V_read = 1'b1;
    end else begin
        img_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236))) begin
        img_data_stream_1_V_blk_n = img_data_stream_1_V_empty_n;
    end else begin
        img_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        img_data_stream_1_V_read = 1'b1;
    end else begin
        img_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236))) begin
        img_data_stream_2_V_blk_n = img_data_stream_2_V_empty_n;
    end else begin
        img_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        img_data_stream_2_V_read = 1'b1;
    end else begin
        img_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == exitcond9_fu_170_p2) & ~(ap_condition_490 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_182_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & ((ap_condition_508 == 1'b1) | ((1'b0 == exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_reg_236) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_182_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_1_ack_in = AXI_video_strm_V_data_V_1_state[1'b1];

assign AXI_video_strm_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign AXI_video_strm_V_data_V_1_load_A = (AXI_video_strm_V_data_V_1_state_cmp_full & ~AXI_video_strm_V_data_V_1_sel_wr);

assign AXI_video_strm_V_data_V_1_load_B = (AXI_video_strm_V_data_V_1_sel_wr & AXI_video_strm_V_data_V_1_state_cmp_full);

assign AXI_video_strm_V_data_V_1_sel = AXI_video_strm_V_data_V_1_sel_rd;

assign AXI_video_strm_V_data_V_1_state_cmp_full = ((AXI_video_strm_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_1_vld_out = AXI_video_strm_V_data_V_1_state[1'b0];

assign AXI_video_strm_V_dest_V_1_ack_in = AXI_video_strm_V_dest_V_1_state[1'b1];

assign AXI_video_strm_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign AXI_video_strm_V_dest_V_1_data_out = 1'b0;

assign AXI_video_strm_V_dest_V_1_sel = AXI_video_strm_V_dest_V_1_sel_rd;

assign AXI_video_strm_V_dest_V_1_vld_out = AXI_video_strm_V_dest_V_1_state[1'b0];

assign AXI_video_strm_V_id_V_1_ack_in = AXI_video_strm_V_id_V_1_state[1'b1];

assign AXI_video_strm_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign AXI_video_strm_V_id_V_1_data_out = 1'b0;

assign AXI_video_strm_V_id_V_1_sel = AXI_video_strm_V_id_V_1_sel_rd;

assign AXI_video_strm_V_id_V_1_vld_out = AXI_video_strm_V_id_V_1_state[1'b0];

assign AXI_video_strm_V_keep_V_1_ack_in = AXI_video_strm_V_keep_V_1_state[1'b1];

assign AXI_video_strm_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign AXI_video_strm_V_keep_V_1_data_out = ap_const_lv3_7;

assign AXI_video_strm_V_keep_V_1_sel = AXI_video_strm_V_keep_V_1_sel_rd;

assign AXI_video_strm_V_keep_V_1_vld_out = AXI_video_strm_V_keep_V_1_state[1'b0];

assign AXI_video_strm_V_last_V_1_ack_in = AXI_video_strm_V_last_V_1_state[1'b1];

assign AXI_video_strm_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign AXI_video_strm_V_last_V_1_load_A = (AXI_video_strm_V_last_V_1_state_cmp_full & ~AXI_video_strm_V_last_V_1_sel_wr);

assign AXI_video_strm_V_last_V_1_load_B = (AXI_video_strm_V_last_V_1_sel_wr & AXI_video_strm_V_last_V_1_state_cmp_full);

assign AXI_video_strm_V_last_V_1_sel = AXI_video_strm_V_last_V_1_sel_rd;

assign AXI_video_strm_V_last_V_1_state_cmp_full = ((AXI_video_strm_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_1_vld_out = AXI_video_strm_V_last_V_1_state[1'b0];

assign AXI_video_strm_V_strb_V_1_ack_in = AXI_video_strm_V_strb_V_1_state[1'b1];

assign AXI_video_strm_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign AXI_video_strm_V_strb_V_1_data_out = ap_const_lv3_0;

assign AXI_video_strm_V_strb_V_1_sel = AXI_video_strm_V_strb_V_1_sel_rd;

assign AXI_video_strm_V_strb_V_1_vld_out = AXI_video_strm_V_strb_V_1_state[1'b0];

assign AXI_video_strm_V_user_V_1_ack_in = AXI_video_strm_V_user_V_1_state[1'b1];

assign AXI_video_strm_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign AXI_video_strm_V_user_V_1_load_A = (AXI_video_strm_V_user_V_1_state_cmp_full & ~AXI_video_strm_V_user_V_1_sel_wr);

assign AXI_video_strm_V_user_V_1_load_B = (AXI_video_strm_V_user_V_1_sel_wr & AXI_video_strm_V_user_V_1_state_cmp_full);

assign AXI_video_strm_V_user_V_1_sel = AXI_video_strm_V_user_V_1_sel_rd;

assign AXI_video_strm_V_user_V_1_state_cmp_full = ((AXI_video_strm_V_user_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_1_vld_out = AXI_video_strm_V_user_V_1_state[1'b0];

assign OUTPUT_STREAM_TDATA = AXI_video_strm_V_data_V_1_data_out;

assign OUTPUT_STREAM_TDEST = AXI_video_strm_V_dest_V_1_data_out;

assign OUTPUT_STREAM_TID = AXI_video_strm_V_id_V_1_data_out;

assign OUTPUT_STREAM_TKEEP = AXI_video_strm_V_keep_V_1_data_out;

assign OUTPUT_STREAM_TLAST = AXI_video_strm_V_last_V_1_data_out;

assign OUTPUT_STREAM_TSTRB = AXI_video_strm_V_strb_V_1_data_out;

assign OUTPUT_STREAM_TUSER = AXI_video_strm_V_user_V_1_data_out;

assign OUTPUT_STREAM_TVALID = AXI_video_strm_V_dest_V_1_state[1'b0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_3];

always @ (*) begin
    ap_condition_490 = ((AXI_video_strm_V_data_V_1_ack_in == 1'b0) | (AXI_video_strm_V_keep_V_1_ack_in == 1'b0) | (AXI_video_strm_V_strb_V_1_ack_in == 1'b0) | (AXI_video_strm_V_user_V_1_ack_in == 1'b0) | (AXI_video_strm_V_last_V_1_ack_in == 1'b0) | (AXI_video_strm_V_id_V_1_ack_in == 1'b0) | (AXI_video_strm_V_dest_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_508 = (((1'b0 == exitcond_reg_236) & (img_data_stream_0_V_empty_n == 1'b0)) | ((1'b0 == exitcond_reg_236) & (img_data_stream_1_V_empty_n == 1'b0)) | ((1'b0 == exitcond_reg_236) & (img_data_stream_2_V_empty_n == 1'b0)));
end

assign axi_last_V_fu_194_p2 = ((p_4_reg_154 == ap_const_lv11_4FF) ? 1'b1 : 1'b0);

assign exitcond9_fu_170_p2 = ((p_s_reg_143 == ap_const_lv10_2D0) ? 1'b1 : 1'b0);

assign exitcond_fu_182_p2 = ((p_4_reg_154 == ap_const_lv11_500) ? 1'b1 : 1'b0);

assign i_V_fu_176_p2 = (p_s_reg_143 + ap_const_lv10_1);

assign j_V_fu_188_p2 = (p_4_reg_154 + ap_const_lv11_1);

assign tmp_data_V_fu_204_p4 = {{{img_data_stream_2_V_dout}, {img_data_stream_1_V_dout}}, {img_data_stream_0_V_dout}};

endmodule //Mat2AXIvideo
