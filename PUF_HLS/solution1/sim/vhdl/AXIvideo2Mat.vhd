-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    img_rows_V_empty_n : IN STD_LOGIC;
    img_rows_V_read : OUT STD_LOGIC;
    img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_empty_n : IN STD_LOGIC;
    img_cols_V_read : OUT STD_LOGIC;
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC;
    img_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    img_rows_V_out_full_n : IN STD_LOGIC;
    img_rows_V_out_write : OUT STD_LOGIC;
    img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_out_full_n : IN STD_LOGIC;
    img_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of AXIvideo2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal AXI_video_strm_V_data_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal AXI_video_strm_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal AXI_video_strm_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_0_sel : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_load_A : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_load_B : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_user_V_0_sel : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_load_A : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_load_B : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_last_V_0_sel : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_load_A : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_load_B : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal exitcond_i_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal eol_2_i_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_rows_V_blk_n : STD_LOGIC;
    signal img_cols_V_blk_n : STD_LOGIC;
    signal img_data_stream_0_V_blk_n : STD_LOGIC;
    signal img_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_data_stream_2_V_blk_n : STD_LOGIC;
    signal img_rows_V_out_blk_n : STD_LOGIC;
    signal img_cols_V_out_blk_n : STD_LOGIC;
    signal p_7_i_reg_210 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_i_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_reg_244 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_last_V_3_i_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_3_i_reg_303 : STD_LOGIC_VECTOR (23 downto 0);
    signal img_rows_V_read_reg_405 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_564 : BOOLEAN;
    signal cols_V_reg_410 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_data_V_reg_415 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_last_V_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_V_fu_343_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_439 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_599 : BOOLEAN;
    signal j_V_fu_358_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal brmerge_i_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal eol_2_i_phi_fu_283_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_i_reg_179 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_data_V1_i_reg_189 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_i_reg_199 : STD_LOGIC_VECTOR (9 downto 0);
    signal eol_i_phi_fu_225_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_i_phi_fu_260_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_phi_fu_272_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_268 : STD_LOGIC_VECTOR (23 downto 0);
    signal sof_1_i_fu_108 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_i_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_7_cast_i_fu_349_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_user_V_fu_325_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_532 : BOOLEAN;


begin




    AXI_video_strm_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_out))) then 
                                        AXI_video_strm_V_data_V_0_sel_rd <= not(AXI_video_strm_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_in))) then 
                                        AXI_video_strm_V_data_V_0_sel_wr <= not(AXI_video_strm_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out) and (AXI_video_strm_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_in) and (AXI_video_strm_V_data_V_0_state = ap_const_lv2_2)))) then 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_ack_out) and (AXI_video_strm_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = AXI_video_strm_V_data_V_0_ack_out) and (AXI_video_strm_V_data_V_0_state = ap_const_lv2_1)))) then 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in) and (AXI_video_strm_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out) and (AXI_video_strm_V_data_V_0_state = ap_const_lv2_1)) or ((AXI_video_strm_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out)))))) then 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_dest_V_0_state)) or ((ap_const_logic_0 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_dest_V_0_state)))) then 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_0_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_dest_V_0_state)) or ((ap_const_logic_0 = AXI_video_strm_V_dest_V_0_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_dest_V_0_state)))) then 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_dest_V_0_state)) or ((ap_const_logic_1 = AXI_video_strm_V_dest_V_0_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_dest_V_0_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_dest_V_0_state) and not(((ap_const_logic_1 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_ack_out)))))) then 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_out))) then 
                                        AXI_video_strm_V_last_V_0_sel_rd <= not(AXI_video_strm_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_in))) then 
                                        AXI_video_strm_V_last_V_0_sel_wr <= not(AXI_video_strm_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_last_V_0_state)) or ((ap_const_logic_0 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_last_V_0_state)))) then 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_last_V_0_state)) or ((ap_const_logic_0 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_last_V_0_state)))) then 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_last_V_0_state)) or ((ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_last_V_0_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_last_V_0_state) and not(((ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out)))))) then 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_out))) then 
                                        AXI_video_strm_V_user_V_0_sel_rd <= not(AXI_video_strm_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_in))) then 
                                        AXI_video_strm_V_user_V_0_sel_wr <= not(AXI_video_strm_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_user_V_0_state)) or ((ap_const_logic_0 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_user_V_0_state)))) then 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_lv2_3 = AXI_video_strm_V_user_V_0_state)) or ((ap_const_logic_0 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_user_V_0_state)))) then 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_lv2_2 = AXI_video_strm_V_user_V_0_state)) or ((ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_lv2_1 = AXI_video_strm_V_user_V_0_state)) or ((ap_const_lv2_3 = AXI_video_strm_V_user_V_0_state) and not(((ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_logic_0 = AXI_video_strm_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out)))))) then 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond2_i_fu_338_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))) and not((ap_const_lv1_0 = exitcond_i_fu_353_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_i_fu_338_p2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_i_fu_338_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))) and not((ap_const_lv1_0 = eol_2_i_phi_fu_283_p4)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if (not((ap_const_logic_0 = start_full_n))) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = start_control_reg) and (ap_const_logic_1 = start_full_n))) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V1_i_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                axi_data_V1_i_reg_189 <= tmp_data_V_reg_415;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                axi_data_V1_i_reg_189 <= axi_data_V_3_i_reg_303;
            end if; 
        end if;
    end process;

    axi_data_V_1_i_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then 
                axi_data_V_1_i_reg_244 <= p_Val2_s_phi_fu_272_p4;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_i_fu_338_p2))) then 
                axi_data_V_1_i_reg_244 <= axi_data_V1_i_reg_189;
            end if; 
        end if;
    end process;

    axi_data_V_3_i_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                axi_data_V_3_i_reg_303 <= axi_data_V_1_i_reg_244;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))))) then 
                axi_data_V_3_i_reg_303 <= AXI_video_strm_V_data_V_0_data_out;
            end if; 
        end if;
    end process;

    axi_last_V1_i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                axi_last_V1_i_reg_179 <= tmp_last_V_reg_423;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                axi_last_V1_i_reg_179 <= axi_last_V_3_i_reg_291;
            end if; 
        end if;
    end process;

    axi_last_V_3_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                axi_last_V_3_i_reg_291 <= eol_reg_233;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))))) then 
                axi_last_V_3_i_reg_291 <= AXI_video_strm_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_2_i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                eol_2_i_reg_280 <= eol_i_reg_221;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))))) then 
                eol_2_i_reg_280 <= AXI_video_strm_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_i_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then 
                eol_i_reg_221 <= axi_last_V_2_i_phi_fu_260_p4;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_i_fu_338_p2))) then 
                eol_i_reg_221 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    eol_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then 
                eol_reg_233 <= axi_last_V_2_i_phi_fu_260_p4;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_i_fu_338_p2))) then 
                eol_reg_233 <= axi_last_V1_i_reg_179;
            end if; 
        end if;
    end process;

    p_7_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_i_fu_353_p2))) then 
                p_7_i_reg_210 <= j_V_fu_358_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_i_fu_338_p2))) then 
                p_7_i_reg_210 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_i_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                p_i_reg_199 <= ap_const_lv10_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                p_i_reg_199 <= i_V_reg_439;
            end if; 
        end if;
    end process;

    sof_1_i_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_i_fu_353_p2))) then 
                sof_1_i_fu_108 <= ap_const_lv1_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                sof_1_i_fu_108 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_data_V_0_load_A)) then
                AXI_video_strm_V_data_V_0_payload_A <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_data_V_0_load_B)) then
                AXI_video_strm_V_data_V_0_payload_B <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_last_V_0_load_A)) then
                AXI_video_strm_V_last_V_0_payload_A <= INPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_last_V_0_load_B)) then
                AXI_video_strm_V_last_V_0_payload_B <= INPUT_STREAM_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_user_V_0_load_A)) then
                AXI_video_strm_V_user_V_0_payload_A <= INPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_user_V_0_load_B)) then
                AXI_video_strm_V_user_V_0_payload_B <= INPUT_STREAM_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))) and (ap_const_lv1_0 = exitcond_i_fu_353_p2))) then
                brmerge_i_reg_453 <= brmerge_i_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_564 = ap_const_boolean_1)))) then
                cols_V_reg_410 <= img_cols_V_dout;
                img_rows_V_read_reg_405 <= img_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then
                exitcond_i_reg_444 <= exitcond_i_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                i_V_reg_439 <= i_V_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)))) then
                tmp_data_V_reg_415 <= AXI_video_strm_V_data_V_0_data_out;
                tmp_last_V_reg_423 <= AXI_video_strm_V_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_reg_280, ap_condition_564, exitcond2_i_fu_338_p2, ap_condition_599, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, tmp_user_V_fu_325_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_condition_564 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_325_p1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_325_p1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond2_i_fu_338_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    AXI_video_strm_V_data_V_0_ack_in <= AXI_video_strm_V_data_V_0_state(1);

    AXI_video_strm_V_data_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, brmerge_i_reg_453, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_reg_280, ap_condition_599)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and (ap_const_lv1_0 = brmerge_i_reg_453) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1)))))) then 
            AXI_video_strm_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_data_V_0_data_out_assign_proc : process(AXI_video_strm_V_data_V_0_payload_A, AXI_video_strm_V_data_V_0_payload_B, AXI_video_strm_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_data_V_0_sel)) then 
            AXI_video_strm_V_data_V_0_data_out <= AXI_video_strm_V_data_V_0_payload_B;
        else 
            AXI_video_strm_V_data_V_0_data_out <= AXI_video_strm_V_data_V_0_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_data_V_0_load_A <= (AXI_video_strm_V_data_V_0_state_cmp_full and not(AXI_video_strm_V_data_V_0_sel_wr));
    AXI_video_strm_V_data_V_0_load_B <= (AXI_video_strm_V_data_V_0_sel_wr and AXI_video_strm_V_data_V_0_state_cmp_full);
    AXI_video_strm_V_data_V_0_sel <= AXI_video_strm_V_data_V_0_sel_rd;
    AXI_video_strm_V_data_V_0_state_cmp_full <= '0' when (AXI_video_strm_V_data_V_0_state = ap_const_lv2_1) else '1';
    AXI_video_strm_V_data_V_0_vld_in <= INPUT_STREAM_TVALID;
    AXI_video_strm_V_data_V_0_vld_out <= AXI_video_strm_V_data_V_0_state(0);

    AXI_video_strm_V_dest_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, brmerge_i_reg_453, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_reg_280, ap_condition_599)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and (ap_const_lv1_0 = brmerge_i_reg_453) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1)))))) then 
            AXI_video_strm_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_dest_V_0_vld_in <= INPUT_STREAM_TVALID;
    AXI_video_strm_V_last_V_0_ack_in <= AXI_video_strm_V_last_V_0_state(1);

    AXI_video_strm_V_last_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, brmerge_i_reg_453, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_reg_280, ap_condition_599)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and (ap_const_lv1_0 = brmerge_i_reg_453) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1)))))) then 
            AXI_video_strm_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_last_V_0_data_out_assign_proc : process(AXI_video_strm_V_last_V_0_payload_A, AXI_video_strm_V_last_V_0_payload_B, AXI_video_strm_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_last_V_0_sel)) then 
            AXI_video_strm_V_last_V_0_data_out <= AXI_video_strm_V_last_V_0_payload_B;
        else 
            AXI_video_strm_V_last_V_0_data_out <= AXI_video_strm_V_last_V_0_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_last_V_0_load_A <= (AXI_video_strm_V_last_V_0_state_cmp_full and not(AXI_video_strm_V_last_V_0_sel_wr));
    AXI_video_strm_V_last_V_0_load_B <= (AXI_video_strm_V_last_V_0_sel_wr and AXI_video_strm_V_last_V_0_state_cmp_full);
    AXI_video_strm_V_last_V_0_sel <= AXI_video_strm_V_last_V_0_sel_rd;
    AXI_video_strm_V_last_V_0_state_cmp_full <= '0' when (AXI_video_strm_V_last_V_0_state = ap_const_lv2_1) else '1';
    AXI_video_strm_V_last_V_0_vld_in <= INPUT_STREAM_TVALID;
    AXI_video_strm_V_last_V_0_vld_out <= AXI_video_strm_V_last_V_0_state(0);
    AXI_video_strm_V_user_V_0_ack_in <= AXI_video_strm_V_user_V_0_state(1);

    AXI_video_strm_V_user_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, brmerge_i_reg_453, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_reg_280, ap_condition_599)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and (ap_const_lv1_0 = brmerge_i_reg_453) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1)))))) then 
            AXI_video_strm_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_user_V_0_data_out_assign_proc : process(AXI_video_strm_V_user_V_0_payload_A, AXI_video_strm_V_user_V_0_payload_B, AXI_video_strm_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_user_V_0_sel)) then 
            AXI_video_strm_V_user_V_0_data_out <= AXI_video_strm_V_user_V_0_payload_B;
        else 
            AXI_video_strm_V_user_V_0_data_out <= AXI_video_strm_V_user_V_0_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_user_V_0_load_A <= (AXI_video_strm_V_user_V_0_state_cmp_full and not(AXI_video_strm_V_user_V_0_sel_wr));
    AXI_video_strm_V_user_V_0_load_B <= (AXI_video_strm_V_user_V_0_sel_wr and AXI_video_strm_V_user_V_0_state_cmp_full);
    AXI_video_strm_V_user_V_0_sel <= AXI_video_strm_V_user_V_0_sel_rd;
    AXI_video_strm_V_user_V_0_state_cmp_full <= '0' when (AXI_video_strm_V_user_V_0_state = ap_const_lv2_1) else '1';
    AXI_video_strm_V_user_V_0_vld_in <= INPUT_STREAM_TVALID;
    AXI_video_strm_V_user_V_0_vld_out <= AXI_video_strm_V_user_V_0_state(0);

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(AXI_video_strm_V_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, brmerge_i_reg_453, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_reg_280)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and (ap_const_lv1_0 = brmerge_i_reg_453)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280)))) then 
            INPUT_STREAM_TDATA_blk_n <= AXI_video_strm_V_data_V_0_state(0);
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_STREAM_TREADY <= AXI_video_strm_V_dest_V_0_state(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5 downto 5);

    ap_condition_532_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444)
    begin
                ap_condition_532 <= ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444));
    end process;


    ap_condition_564_assign_proc : process(real_start, ap_done_reg, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
                ap_condition_564 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_rows_V_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0));
    end process;


    ap_condition_599_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, exitcond_i_reg_444, brmerge_i_reg_453)
    begin
                ap_condition_599 <= (((ap_const_lv1_0 = exitcond_i_reg_444) and (ap_const_lv1_0 = brmerge_i_reg_453) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_i_reg_444) and (img_data_stream_0_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_i_reg_444) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_i_reg_444) and (img_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond2_i_fu_338_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond2_i_fu_338_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_reg_255 <= "X";
    ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_268 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    axi_last_V_2_i_phi_fu_260_p4_assign_proc : process(AXI_video_strm_V_last_V_0_data_out, brmerge_i_reg_453, eol_reg_233, ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_reg_255, ap_condition_532)
    begin
        if ((ap_condition_532 = ap_const_boolean_1)) then
            if (not((ap_const_lv1_0 = brmerge_i_reg_453))) then 
                axi_last_V_2_i_phi_fu_260_p4 <= eol_reg_233;
            elsif ((ap_const_lv1_0 = brmerge_i_reg_453)) then 
                axi_last_V_2_i_phi_fu_260_p4 <= AXI_video_strm_V_last_V_0_data_out;
            else 
                axi_last_V_2_i_phi_fu_260_p4 <= ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_reg_255;
            end if;
        else 
            axi_last_V_2_i_phi_fu_260_p4 <= ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_reg_255;
        end if; 
    end process;

    brmerge_i_fu_367_p2 <= (sof_1_i_fu_108 or eol_i_phi_fu_225_p4);

    eol_2_i_phi_fu_283_p4_assign_proc : process(AXI_video_strm_V_last_V_0_data_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_reg_280)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = eol_2_i_reg_280))) then 
            eol_2_i_phi_fu_283_p4 <= AXI_video_strm_V_last_V_0_data_out;
        else 
            eol_2_i_phi_fu_283_p4 <= eol_2_i_reg_280;
        end if; 
    end process;


    eol_i_phi_fu_225_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, eol_i_reg_221, axi_last_V_2_i_phi_fu_260_p4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444))) then 
            eol_i_phi_fu_225_p4 <= axi_last_V_2_i_phi_fu_260_p4;
        else 
            eol_i_phi_fu_225_p4 <= eol_i_reg_221;
        end if; 
    end process;

    exitcond2_i_fu_338_p2 <= "1" when (p_cast_cast_i_fu_334_p1 = img_rows_V_read_reg_405) else "0";
    exitcond_i_fu_353_p2 <= "1" when (p_7_cast_i_fu_349_p1 = cols_V_reg_410) else "0";
    i_V_fu_343_p2 <= std_logic_vector(unsigned(p_i_reg_199) + unsigned(ap_const_lv10_1));

    img_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            img_cols_V_blk_n <= img_cols_V_empty_n;
        else 
            img_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_cols_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_out_full_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            img_cols_V_out_blk_n <= img_cols_V_out_full_n;
        else 
            img_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_cols_V_out_din <= img_cols_V_dout;

    img_cols_V_out_write_assign_proc : process(ap_CS_fsm_state1, ap_condition_564)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_564 = ap_const_boolean_1)))) then 
            img_cols_V_out_write <= ap_const_logic_1;
        else 
            img_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_cols_V_read_assign_proc : process(ap_CS_fsm_state1, ap_condition_564)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_564 = ap_const_boolean_1)))) then 
            img_cols_V_read <= ap_const_logic_1;
        else 
            img_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_0_V_blk_n_assign_proc : process(img_data_stream_0_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444))) then 
            img_data_stream_0_V_blk_n <= img_data_stream_0_V_full_n;
        else 
            img_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_0_V_din <= p_Val2_s_phi_fu_272_p4(8 - 1 downto 0);

    img_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, ap_condition_599)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_1_V_blk_n_assign_proc : process(img_data_stream_1_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444))) then 
            img_data_stream_1_V_blk_n <= img_data_stream_1_V_full_n;
        else 
            img_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_1_V_din <= p_Val2_s_phi_fu_272_p4(15 downto 8);

    img_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, ap_condition_599)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_2_V_blk_n_assign_proc : process(img_data_stream_2_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444))) then 
            img_data_stream_2_V_blk_n <= img_data_stream_2_V_full_n;
        else 
            img_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_2_V_din <= p_Val2_s_phi_fu_272_p4(23 downto 16);

    img_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_444, ap_condition_599)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_i_reg_444) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_condition_599 = ap_const_boolean_1))))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            img_rows_V_blk_n <= img_rows_V_empty_n;
        else 
            img_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_rows_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_out_full_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            img_rows_V_out_blk_n <= img_rows_V_out_full_n;
        else 
            img_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_rows_V_out_din <= img_rows_V_dout;

    img_rows_V_out_write_assign_proc : process(ap_CS_fsm_state1, ap_condition_564)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_564 = ap_const_boolean_1)))) then 
            img_rows_V_out_write <= ap_const_logic_1;
        else 
            img_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_read_assign_proc : process(ap_CS_fsm_state1, ap_condition_564)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_564 = ap_const_boolean_1)))) then 
            img_rows_V_read <= ap_const_logic_1;
        else 
            img_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond2_i_fu_338_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond2_i_fu_338_p2)))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_358_p2 <= std_logic_vector(unsigned(p_7_i_reg_210) + unsigned(ap_const_lv11_1));
    p_7_cast_i_fu_349_p1 <= std_logic_vector(resize(unsigned(p_7_i_reg_210),12));

    p_Val2_s_phi_fu_272_p4_assign_proc : process(AXI_video_strm_V_data_V_0_data_out, brmerge_i_reg_453, axi_data_V_1_i_reg_244, ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_268, ap_condition_532)
    begin
        if ((ap_condition_532 = ap_const_boolean_1)) then
            if (not((ap_const_lv1_0 = brmerge_i_reg_453))) then 
                p_Val2_s_phi_fu_272_p4 <= axi_data_V_1_i_reg_244;
            elsif ((ap_const_lv1_0 = brmerge_i_reg_453)) then 
                p_Val2_s_phi_fu_272_p4 <= AXI_video_strm_V_data_V_0_data_out;
            else 
                p_Val2_s_phi_fu_272_p4 <= ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_268;
            end if;
        else 
            p_Val2_s_phi_fu_272_p4 <= ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_268;
        end if; 
    end process;

    p_cast_cast_i_fu_334_p1 <= std_logic_vector(resize(unsigned(p_i_reg_199),11));

    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    tmp_user_V_fu_325_p1 <= AXI_video_strm_V_user_V_0_data_out;
end behav;
